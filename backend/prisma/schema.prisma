// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  passwordHash    String   @map("password_hash")
  firstName       String   @map("first_name")
  lastName        String   @map("last_name")
  dateOfBirth     DateTime @map("date_of_birth") @db.Date
  phoneNumber     String   @map("phone_number")
  accountBalance  Decimal  @default(0.0000) @map("account_balance") @db.Decimal(19, 4)
  riskTolerance   RiskTolerance @map("risk_tolerance")
  kycStatus       KycStatus @default(PENDING) @map("kyc_status")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  riskManagement  RiskManagement?
  auditLogs       AuditLog[]

  @@map("users")
}

model RiskManagement {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  riskProfile      RiskTolerance @map("risk_profile")
  dailyLossLimit   Decimal  @map("daily_loss_limit") @db.Decimal(19, 4)
  weeklyLossLimit  Decimal  @map("weekly_loss_limit") @db.Decimal(19, 4)
  monthlyLossLimit Decimal  @map("monthly_loss_limit") @db.Decimal(19, 4)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("risk_management")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  eventType   String   @map("event_type")
  eventAction String   @map("event_action")
  eventData   Json?    @map("event_data")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

enum RiskTolerance {
  CONSERVATIVE @map("conservative")
  MODERATE     @map("moderate")
  AGGRESSIVE   @map("aggressive")

  @@map("risk_tolerance")
}

enum KycStatus {
  PENDING   @map("pending")
  APPROVED  @map("approved")
  REJECTED  @map("rejected")

  @@map("kyc_status")
}
