// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  passwordHash          String   @map("password_hash")
  firstName             String   @map("first_name")
  lastName              String   @map("last_name")
  dateOfBirth           DateTime @map("date_of_birth")
  phoneNumber           String   @map("phone_number")
  accountBalance        Decimal  @default(0.0000) @map("account_balance")
  riskTolerance         String @map("risk_tolerance")
  kycStatus             String @default("pending") @map("kyc_status")
  onboardingCompleted   Boolean  @default(false) @map("onboarding_completed")
  onboardingStep        Int      @default(0) @map("onboarding_step")
  onboardingCompletedAt DateTime? @map("onboarding_completed_at")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  riskManagement    RiskManagement?
  auditLogs         AuditLog[]
  refreshTokens     RefreshToken[]
  failedAttempts    FailedLoginAttempt[]
  transactions      Transaction[]
  holdings          Holding[]
  orders            Order[]
  tradingSessions   TradingSession[]
  portfolioPositions PortfolioPosition[]
  portfolioSummary  PortfolioSummary?

  @@map("users")
}

model RiskManagement {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  riskProfile      String @map("risk_profile")
  dailyLossLimit   Decimal  @map("daily_loss_limit")
  weeklyLossLimit  Decimal  @map("weekly_loss_limit")
  monthlyLossLimit Decimal  @map("monthly_loss_limit")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("risk_management")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  eventType   String   @map("event_type")
  eventAction String   @map("event_action")
  eventData   String?  @map("event_data")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model RefreshToken {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  tokenHash   String   @map("token_hash")
  expiresAt   DateTime @map("expires_at")
  isRevoked   Boolean  @default(false) @map("is_revoked")
  rememberMe  Boolean  @default(false) @map("remember_me")
  createdAt   DateTime @default(now()) @map("created_at")
  lastUsed    DateTime? @map("last_used")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId, isRevoked])
  @@index([expiresAt])
}

model FailedLoginAttempt {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  ipAddress   String   @map("ip_address")
  attemptTime DateTime @default(now()) @map("attempt_time")
  userAgent   String?  @map("user_agent")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("failed_login_attempts")
  @@index([userId, attemptTime])
  @@index([ipAddress, attemptTime])
}

// Sprint 2: Trading and Portfolio Models

model Transaction {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  type          String      // 'funding', 'trade_buy', 'trade_sell'
  amount        Decimal
  status        String      @default("completed") // 'pending', 'completed', 'failed'
  referenceId   String?     @map("reference_id") // External reference for funding
  description   String?
  metadata      String?     // JSON string for additional data
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
  @@index([userId, type])
  @@index([userId, createdAt])
}

model Holding {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  symbol        String      // Stock symbol (e.g., 'AAPL')
  quantity      Decimal
  averageCost   Decimal     @map("average_cost")
  totalCost     Decimal     @map("total_cost")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("holdings")
  @@unique([userId, symbol])
  @@index([userId])
}

model Order {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  symbol        String      // Stock symbol (e.g., 'AAPL')
  type          String      // 'buy', 'sell'
  quantity      Decimal
  price         Decimal
  totalAmount   Decimal     @map("total_amount")
  status        String      @default("completed") // 'pending', 'completed', 'cancelled'
  executedAt    DateTime?   @map("executed_at")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
  @@index([userId, createdAt])
  @@index([symbol])
}

model StockPrice {
  id            String      @id @default(cuid())
  symbol        String      @unique
  price         Decimal
  change        Decimal     @default(0.00)
  changePercent Decimal     @default(0.00) @map("change_percent")
  volume        Int         @default(0)
  lastUpdated   DateTime    @default(now()) @map("last_updated")

  @@map("stock_prices")
  @@index([symbol])
  @@index([lastUpdated])
}

// Sprint 3: Trading Session Management

model TradingSession {
  id                          String      @id @default(cuid())
  userId                      String      @map("user_id")
  durationMinutes             Int         @map("duration_minutes")
  lossLimitAmount             Decimal     @map("loss_limit_amount")
  lossLimitPercentage         Decimal     @map("loss_limit_percentage")
  status                      String      @default("pending") // 'pending', 'active', 'completed', 'stopped', 'expired'
  startTime                   DateTime?   @map("start_time")
  endTime                     DateTime?   @map("end_time")
  actualDurationMinutes       Int?        @map("actual_duration_minutes")
  totalTrades                 Int         @default(0) @map("total_trades")
  realizedPnl                 Decimal     @default(0.00) @map("realized_pnl")
  sessionPerformancePercentage Decimal    @default(0.00) @map("session_performance_percentage")
  terminationReason           String?     @map("termination_reason") // 'completed', 'manual_stop', 'loss_limit', 'time_limit'
  createdAt                   DateTime    @default(now()) @map("created_at")
  updatedAt                   DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trading_sessions")
  @@index([userId, status])
  @@index([status])
  @@index([userId, createdAt])
}

// Epic 4: Portfolio Management Models

model PortfolioPosition {
  id                  Int         @id @default(autoincrement())
  userId              String      @map("user_id")
  symbol              String
  quantity            Decimal
  averageCost         Decimal     @map("average_cost")
  currentPrice        Decimal?    @map("current_price")
  marketValue         Decimal?    @map("market_value")
  unrealizedPnl       Decimal?    @map("unrealized_pnl")
  unrealizedPnlPercent Decimal?   @map("unrealized_pnl_percent")
  sector              String?
  lastUpdated         DateTime    @map("last_updated") @default(now())
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_positions")
  @@unique([userId, symbol])
  @@index([userId, symbol])
  @@index([lastUpdated])
  @@index([userId, lastUpdated])
}

model PortfolioSummary {
  id                Int         @id @default(autoincrement())
  userId            String      @unique @map("user_id")
  totalValue        Decimal     @map("total_value")
  cashBalance       Decimal     @map("cash_balance")
  totalPnl          Decimal     @map("total_pnl")
  totalPnlPercent   Decimal     @map("total_pnl_percent")
  numberOfPositions Int         @map("number_of_positions")
  lastUpdated       DateTime    @map("last_updated") @default(now())
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_summary")
}
