// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  passwordHash          String   @map("password_hash")
  firstName             String   @map("first_name")
  lastName              String   @map("last_name")
  dateOfBirth           DateTime @map("date_of_birth")
  phoneNumber           String   @map("phone_number")
  accountBalance        Decimal  @default(0.0000) @map("account_balance")
  riskTolerance         String @map("risk_tolerance")
  kycStatus             String @default("pending") @map("kyc_status")
  onboardingCompleted   Boolean  @default(false) @map("onboarding_completed")
  onboardingStep        Int      @default(0) @map("onboarding_step")
  onboardingCompletedAt DateTime? @map("onboarding_completed_at")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  riskManagement        RiskManagement?
  auditLogs             AuditLog[]
  refreshTokens         RefreshToken[]
  failedAttempts        FailedLoginAttempt[]
  transactions          Transaction[]
  holdings              Holding[]
  orders                Order[]
  tradingSessions       TradingSession[]
  portfolioPositions    PortfolioPosition[]
  portfolioSummary      PortfolioSummary?
  portfolioPerformance  PortfolioPerformance[]
  performanceAttribution PerformanceAttribution[]
  performanceSnapshots  PerformanceSnapshot[]
  portfolioTargets      PortfolioTarget[]
  rebalancingRecommendations RebalancingRecommendation[]
  optimizationResults   OptimizationResult[]
  algorithmDecisions    AlgorithmDecision[]
  algorithmPerformance  AlgorithmPerformance[]

  @@map("users")
}

model RiskManagement {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  riskProfile      String   @map("risk_profile")
  riskScore        Int      @default(0) @map("risk_score") // 0-100 scale
  riskLevel        String   @default("LOW") @map("risk_level") // LOW, MEDIUM, HIGH, CRITICAL
  riskFactors      String   @default("{}") @map("risk_factors") // JSON string
  riskLimits       String   @default("{}") @map("risk_limits") // JSON string
  dailyLossLimit   Decimal  @map("daily_loss_limit")
  weeklyLossLimit  Decimal  @map("weekly_loss_limit")
  monthlyLossLimit Decimal  @map("monthly_loss_limit")
  lastAssessment   DateTime @default(now()) @map("last_assessment")
  nextReview       DateTime @default(now()) @map("next_review")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("risk_management")
  @@index([nextReview])
  @@index([riskLevel])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  eventType   String   @map("event_type")
  eventAction String   @map("event_action")
  eventData   String?  @map("event_data")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model RefreshToken {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  tokenHash   String   @map("token_hash")
  expiresAt   DateTime @map("expires_at")
  isRevoked   Boolean  @default(false) @map("is_revoked")
  rememberMe  Boolean  @default(false) @map("remember_me")
  createdAt   DateTime @default(now()) @map("created_at")
  lastUsed    DateTime? @map("last_used")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId, isRevoked])
  @@index([expiresAt])
}

model FailedLoginAttempt {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  ipAddress   String   @map("ip_address")
  attemptTime DateTime @default(now()) @map("attempt_time")
  userAgent   String?  @map("user_agent")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("failed_login_attempts")
  @@index([userId, attemptTime])
  @@index([ipAddress, attemptTime])
}

// Sprint 2: Trading and Portfolio Models

model Transaction {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  type          String      // 'funding', 'trade_buy', 'trade_sell'
  amount        Decimal
  status        String      @default("completed") // 'pending', 'completed', 'failed'
  referenceId   String?     @map("reference_id") // External reference for funding
  description   String?
  metadata      String?     // JSON string for additional data
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
  @@index([userId, type])
  @@index([userId, createdAt])
}

model Holding {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  symbol        String      // Stock symbol (e.g., 'AAPL')
  quantity      Decimal
  averageCost   Decimal     @map("average_cost")
  totalCost     Decimal     @map("total_cost")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("holdings")
  @@unique([userId, symbol])
  @@index([userId])
}

model Order {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  symbol        String      // Stock symbol (e.g., 'AAPL')
  type          String      // 'buy', 'sell'
  quantity      Decimal
  price         Decimal
  totalAmount   Decimal     @map("total_amount")
  status        String      @default("completed") // 'pending', 'completed', 'cancelled'
  executedAt    DateTime?   @map("executed_at")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
  @@index([userId, createdAt])
  @@index([symbol])
}

model StockPrice {
  id            String      @id @default(cuid())
  symbol        String      @unique
  price         Decimal
  change        Decimal     @default(0.00)
  changePercent Decimal     @default(0.00) @map("change_percent")
  volume        Int         @default(0)
  lastUpdated   DateTime    @default(now()) @map("last_updated")

  @@map("stock_prices")
  @@index([symbol])
  @@index([lastUpdated])
}

// Sprint 3: Trading Session Management

model TradingSession {
  id                String               @id @default(cuid())
  userId            String               @map("user_id")
  
  // Session Configuration
  durationMinutes   Int                  @map("duration_minutes") // 60, 240, 1440, 10080 (1h, 4h, 24h, 7d)
  lossLimitAmount   Decimal              @map("loss_limit_amount")
  lossLimitPercent  Decimal              @map("loss_limit_percent")
  
  // Session Status - String fields for SQLite compatibility
  status            String               @default("PENDING") @map("status") // 'PENDING', 'ACTIVE', 'EXPIRED', 'STOPPED', 'COMPLETED', 'EMERGENCY_STOPPED'
  startTime         DateTime?            @map("start_time")
  endTime           DateTime?            @map("end_time")
  actualEndTime     DateTime?            @map("actual_end_time")
  
  // Performance Tracking
  currentBalance    Decimal              @map("current_balance")
  startingBalance   Decimal              @map("starting_balance")
  currentPnL        Decimal              @default(0) @map("current_pnl")
  maxLoss           Decimal              @default(0) @map("max_loss")
  maxGain           Decimal              @default(0) @map("max_gain")
  tradeCount        Int                  @default(0) @map("trade_count")
  
  // Legacy fields for compatibility
  actualDurationMinutes       Int?        @map("actual_duration_minutes")
  realizedPnl                 Decimal     @default(0.00) @map("realized_pnl")
  sessionPerformancePercentage Decimal    @default(0.00) @map("session_performance_percentage")
  terminationReason           String?     @map("termination_reason")
  
  // Metadata
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  
  // Relations
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  algorithmDecisions AlgorithmDecision[]
  sessionEvents     SessionEvent[]
  
  @@map("trading_sessions")
  @@index([userId, status])
  @@index([status])
  @@index([userId, createdAt])
  @@index([endTime])
}

model SessionEvent {
  id          String            @id @default(cuid())
  sessionId   String            @map("session_id")
  session     TradingSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  eventType   String            @map("event_type") // 'SESSION_CREATED', 'SESSION_STARTED', 'SESSION_ENDED', 'LOSS_LIMIT_WARNING', 'TIME_LIMIT_WARNING', 'EMERGENCY_STOP', 'ALGORITHM_DECISION'
  eventData   String?           @map("event_data") // JSON string
  timestamp   DateTime          @default(now())
  
  @@map("session_events")
  @@index([sessionId, timestamp])
}

// Epic 4: Portfolio Management Models

model PortfolioPosition {
  id                  Int         @id @default(autoincrement())
  userId              String      @map("user_id")
  symbol              String
  quantity            Decimal
  averageCost         Decimal     @map("average_cost")
  currentPrice        Decimal?    @map("current_price")
  marketValue         Decimal?    @map("market_value")
  unrealizedPnl       Decimal?    @map("unrealized_pnl")
  unrealizedPnlPercent Decimal?   @map("unrealized_pnl_percent")
  sector              String?
  lastUpdated         DateTime    @map("last_updated") @default(now())
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_positions")
  @@unique([userId, symbol])
  @@index([userId, symbol])
  @@index([lastUpdated])
  @@index([userId, lastUpdated])
}

model PortfolioSummary {
  id                Int         @id @default(autoincrement())
  userId            String      @unique @map("user_id")
  totalValue        Decimal     @map("total_value")
  cashBalance       Decimal     @map("cash_balance")
  totalPnl          Decimal     @map("total_pnl")
  totalPnlPercent   Decimal     @map("total_pnl_percent")
  numberOfPositions Int         @map("number_of_positions")
  lastUpdated       DateTime    @map("last_updated") @default(now())
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_summary")
}

// Performance Analytics Models

model PortfolioPerformance {
  id                 Int      @id @default(autoincrement())
  userId             String   @map("user_id")
  date               DateTime
  portfolioValue     Decimal  @map("portfolio_value")
  dailyReturn        Decimal? @map("daily_return")
  cumulativeReturn   Decimal? @map("cumulative_return")
  benchmarkReturn    Decimal? @map("benchmark_return")
  volatility         Decimal?
  sharpeRatio        Decimal? @map("sharpe_ratio")
  maxDrawdown        Decimal? @map("max_drawdown")
  winRate            Decimal? @map("win_rate")
  avgWin             Decimal? @map("avg_win")
  avgLoss            Decimal? @map("avg_loss")
  largestGain        Decimal? @map("largest_gain")
  largestLoss        Decimal? @map("largest_loss")
  consecutiveWins    Int      @default(0) @map("consecutive_wins")
  consecutiveLosses  Int      @default(0) @map("consecutive_losses")
  totalTrades        Int      @default(0) @map("total_trades")
  createdAt          DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_performance")
  @@index([userId, date])
  @@index([date])
}

model PerformanceAttribution {
  id             Int      @id @default(autoincrement())
  userId         String   @map("user_id")
  date           DateTime
  symbol         String
  positionReturn Decimal? @map("position_return")
  contribution   Decimal?
  weight         Decimal?
  sector         String?
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("performance_attribution")
  @@index([userId, date])
  @@index([symbol])
}

model BenchmarkData {
  id               Int      @id @default(autoincrement())
  symbol           String
  name             String
  date             DateTime
  price            Decimal
  dailyReturn      Decimal? @map("daily_return")
  cumulativeReturn Decimal? @map("cumulative_return")
  lastUpdated      DateTime @default(now()) @map("last_updated")

  @@map("benchmark_data")
  @@index([symbol, date])
}

model PerformanceSnapshot {
  id                     Int      @id @default(autoincrement())
  userId                 String   @map("user_id")
  period                 String   // '1D', '1W', '1M', '3M', '6M', '1Y', 'YTD', 'ALL'
  startDate              DateTime @map("start_date")
  endDate                DateTime @map("end_date")
  totalReturn            Decimal  @map("total_return")
  totalReturnPercent     Decimal  @map("total_return_percent")
  annualizedReturn       Decimal? @map("annualized_return")
  volatility             Decimal?
  sharpeRatio            Decimal? @map("sharpe_ratio")
  sortinoRatio           Decimal? @map("sortino_ratio")
  maxDrawdown            Decimal? @map("max_drawdown")
  benchmarkReturn        Decimal? @map("benchmark_return")
  benchmarkReturnPercent Decimal? @map("benchmark_return_percent")
  alpha                  Decimal?
  beta                   Decimal?
  correlation            Decimal?
  lastUpdated            DateTime @default(now()) @map("last_updated")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("performance_snapshots")
  @@unique([userId, period, startDate, endDate])
  @@index([userId, period])
}

// Portfolio Optimization Models

model PortfolioTarget {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  targetType        String   @map("target_type") // 'asset_class', 'sector', 'symbol'
  targetName        String   @map("target_name")
  targetPercentage  Decimal  @map("target_percentage")
  minPercentage     Decimal? @map("min_percentage")
  maxPercentage     Decimal? @map("max_percentage")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_targets")
  @@index([userId])
  @@index([userId, targetType])
}

model RebalancingRecommendation {
  id                   String   @id @default(cuid())
  userId               String   @map("user_id")
  recommendationDate   DateTime @map("recommendation_date")
  symbol               String
  currentAllocation    Decimal? @map("current_allocation")
  targetAllocation     Decimal? @map("target_allocation")
  recommendedAction    String   @map("recommended_action") // 'buy', 'sell', 'hold'
  recommendedQuantity  Decimal? @map("recommended_quantity")
  estimatedCost        Decimal? @map("estimated_cost")
  taxImpact            Decimal? @map("tax_impact")
  priorityScore        Decimal? @map("priority_score")
  reasoning            String?
  status               String   @default("pending") // 'pending', 'executed', 'cancelled'
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rebalancing_recommendations")
  @@index([userId])
  @@index([userId, recommendationDate])
  @@index([status])
}

model OptimizationResult {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  optimizationDate      DateTime @map("optimization_date")
  optimizationType      String   @map("optimization_type") // 'mpt', 'risk_parity', 'black_litterman', 'min_variance'
  currentSharpeRatio    Decimal? @map("current_sharpe_ratio")
  optimizedSharpeRatio  Decimal? @map("optimized_sharpe_ratio")
  currentRisk           Decimal? @map("current_risk")
  optimizedRisk         Decimal? @map("optimized_risk")
  improvementScore      Decimal? @map("improvement_score")
  implementationCost    Decimal? @map("implementation_cost")
  resultsData           String?  @map("results_data") // JSON string
  createdAt             DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("optimization_results")
  @@index([userId])
  @@index([userId, optimizationDate])
  @@index([optimizationType])
}

// Epic 3: SmartTrade AI Algorithm Models

model AlgorithmDecision {
  id                   String   @id @default(cuid())
  userId               String   @map("user_id")
  sessionId            String?  @map("session_id")
  symbol               String
  decisionType         String   @map("decision_type") // 'buy', 'sell', 'hold', 'stop'
  confidence           Decimal  // 0-100 confidence score
  reasoning            String?  // Algorithm reasoning explanation
  marketCondition      String?  @map("market_condition") // 'bull', 'bear', 'sideways', 'volatile'
  volatilityIndex      Decimal? @map("volatility_index")
  riskScore            Decimal? @map("risk_score")
  positionSize         Decimal? @map("position_size") // Recommended position size
  entryPrice           Decimal? @map("entry_price") // Recommended entry price
  stopLoss             Decimal? @map("stop_loss") // Recommended stop loss
  takeProfit           Decimal? @map("take_profit") // Recommended take profit
  technicalIndicators  String?  @map("technical_indicators") // JSON string of technical analysis
  fundamentalData      String?  @map("fundamental_data") // JSON string of fundamental analysis
  
  // Execution tracking
  isExecuted           Boolean  @default(false) @map("is_executed")
  executedAt           DateTime? @map("executed_at")
  executionPrice       Decimal? @map("execution_price")
  actualQuantity       Decimal? @map("actual_quantity")
  
  // Outcome tracking
  outcome              String?  // 'win', 'loss', 'breakeven', 'pending'
  profitLoss           Decimal? @map("profit_loss")
  profitLossPercent    Decimal? @map("profit_loss_percent")
  holdingDuration      Int?     @map("holding_duration") // Duration in minutes
  
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradingSession TradingSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@map("algorithm_decisions")
  @@index([userId])
  @@index([userId, createdAt])
  @@index([symbol])
  @@index([decisionType])
  @@index([isExecuted])
  @@index([outcome])
  @@index([sessionId])
}

model AlgorithmPerformance {
  id                      String   @id @default(cuid())
  userId                  String?  @map("user_id") // Null for system-wide performance
  date                    DateTime
  timeframe               String   @default("daily") // 'daily', 'weekly', 'monthly'
  
  // Decision metrics
  totalDecisions          Int      @default(0) @map("total_decisions")
  executedDecisions       Int      @default(0) @map("executed_decisions")
  winCount                Int      @default(0) @map("win_count")
  lossCount               Int      @default(0) @map("loss_count")
  breakEvenCount          Int      @default(0) @map("break_even_count")
  
  // Performance metrics
  winRate                 Decimal? @map("win_rate")
  avgWin                  Decimal? @map("avg_win")
  avgLoss                 Decimal? @map("avg_loss")
  avgHoldingTime          Decimal? @map("avg_holding_time") // In hours
  totalProfitLoss         Decimal? @map("total_profit_loss")
  returnPercentage        Decimal? @map("return_percentage")
  
  // Confidence metrics
  avgConfidence           Decimal? @map("avg_confidence")
  highConfidenceWinRate   Decimal? @map("high_confidence_win_rate") // Win rate for confidence > 80
  lowConfidenceWinRate    Decimal? @map("low_confidence_win_rate") // Win rate for confidence < 50
  
  // Risk metrics
  sharpeRatio             Decimal? @map("sharpe_ratio")
  maxDrawdown             Decimal? @map("max_drawdown")
  volatility              Decimal?
  
  // Market condition performance
  bullMarketPerformance   Decimal? @map("bull_market_performance")
  bearMarketPerformance   Decimal? @map("bear_market_performance")
  sidewaysPerformance     Decimal? @map("sideways_performance")
  volatilePerformance     Decimal? @map("volatile_performance")
  
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("algorithm_performance")
  @@index([userId, date])
  @@index([date])
  @@index([timeframe])
}

model MarketCondition {
  id                    String   @id @default(cuid())
  timestamp             DateTime @default(now())
  
  // Market classification
  overallCondition      String   @map("overall_condition") // 'bull', 'bear', 'sideways', 'volatile'
  trendStrength         Decimal? @map("trend_strength") // 0-100
  volatilityIndex       Decimal? @map("volatility_index") // VIX-like measure
  marketSentiment       String?  @map("market_sentiment") // 'positive', 'negative', 'neutral'
  
  // Market indicators
  spyPrice              Decimal? @map("spy_price")
  spyChange             Decimal? @map("spy_change")
  spyChangePercent      Decimal? @map("spy_change_percent")
  volume                BigInt?
  
  // Technical indicators
  sma20                 Decimal? @map("sma_20")
  sma50                 Decimal? @map("sma_50")
  sma200                Decimal? @map("sma_200")
  rsi                   Decimal?
  macd                  Decimal?
  bollBandUpper         Decimal? @map("boll_band_upper")
  bollBandLower         Decimal? @map("boll_band_lower")
  
  // Market data
  advanceDeclineRatio   Decimal? @map("advance_decline_ratio")
  newHighsNews          Int?     @map("new_highs_news")
  sectorRotation        String?  @map("sector_rotation") // JSON of sector performance
  
  // Analysis metadata
  analysisVersion       String?  @map("analysis_version")
  dataQuality          String   @default("good") @map("data_quality") // 'good', 'fair', 'poor'
  confidence           Decimal? // Confidence in the analysis 0-100
  
  createdAt            DateTime @default(now()) @map("created_at")

  @@map("market_conditions")
  @@index([timestamp])
  @@index([overallCondition])
  @@index([timestamp, overallCondition])
}

model AlgorithmConfig {
  id                      String   @id @default(cuid())
  name                    String   @unique
  version                 String
  isActive                Boolean  @default(false) @map("is_active")
  
  // Algorithm parameters
  parameters              String   // JSON string of algorithm parameters
  riskParameters          String   @map("risk_parameters") // JSON string
  marketConditionWeights  String   @map("market_condition_weights") // JSON string
  
  // Performance thresholds
  minConfidenceThreshold  Decimal  @default(50) @map("min_confidence_threshold")
  maxPositionSize         Decimal  @default(0.1) @map("max_position_size") // Max 10% of portfolio
  stopLossPercent         Decimal  @default(5) @map("stop_loss_percent")
  takeProfitPercent       Decimal  @default(10) @map("take_profit_percent")
  
  // Feature flags
  enableTechnicalAnalysis Boolean  @default(true) @map("enable_technical_analysis")
  enableFundamentalAnalysis Boolean @default(true) @map("enable_fundamental_analysis")
  enableSentimentAnalysis Boolean  @default(true) @map("enable_sentiment_analysis")
  enableRiskManagement    Boolean  @default(true) @map("enable_risk_management")
  
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@map("algorithm_configs")
}

// Add relations to existing models
// Update User model to include algorithm relations (need to add this separately)
// Update TradingSession model to include algorithm relations (need to add this separately)
